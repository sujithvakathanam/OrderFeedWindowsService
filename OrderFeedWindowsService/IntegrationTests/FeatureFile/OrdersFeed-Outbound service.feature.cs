// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTests.FeatureFile
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OrderFeedFunctionatity")]
    public partial class OrderFeedFunctionatityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OrdersFeed-Outbound service.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OrderFeedFunctionatity", "In order to notify the shipped Orders to external application\r\nAs an Outbound ser" +
                    "vice\r\nI want to be able to send a report of all the shipped orders\r\nAnd I want t" +
                    "o raise an event in the MSM queue", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line 8
 testRunner.Given("the ExportFolder_OrdersFeed directory contains no files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Updation of OrderFeed table")]
        [NUnit.Framework.CategoryAttribute("OrderFeed")]
        public virtual void UpdationOfOrderFeedTable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updation of OrderFeed table", new string[] {
                        "OrderFeed"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderId",
                        "CustomerId",
                        "EmployeeId",
                        "OrderFeed"});
            table1.AddRow(new string[] {
                        "1001",
                        "CENTC",
                        "4",
                        "0"});
            table1.AddRow(new string[] {
                        "1002",
                        "ERNSH",
                        "1",
                        "0"});
#line 12
 testRunner.Given("the following order has been shipped", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServiceName"});
            table2.AddRow(new string[] {
                        "OrderFeedService"});
#line 16
 testRunner.When("the OrderFeed Service is run", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderId",
                        "OrderFeed"});
            table3.AddRow(new string[] {
                        "1001",
                        "1"});
            table3.AddRow(new string[] {
                        "1002",
                        "1"});
#line 19
 testRunner.Then("the OrdersTable should be Updated with below OrderFeedStatus information", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generation of XML file")]
        [NUnit.Framework.CategoryAttribute("OrderFeed")]
        public virtual void GenerationOfXMLFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generation of XML file", new string[] {
                        "OrderFeed"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderId",
                        "CustomerId",
                        "EmployeeId",
                        "OrderFeed"});
            table4.AddRow(new string[] {
                        "4001",
                        "CENTC",
                        "4",
                        "0"});
            table4.AddRow(new string[] {
                        "4002",
                        "ERNSH",
                        "1",
                        "0"});
#line 26
 testRunner.Given("the following order has been shipped", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServiceName"});
            table5.AddRow(new string[] {
                        "OrderFeedService"});
#line 30
 testRunner.When("the OrderFeed Service is run", ((string)(null)), table5, "When ");
#line 33
 testRunner.Then("1 file should be generated with name OrderFeed<datetimestamp>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And("the file should contain the following details", @"<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?>
<!--Order Feed information-->
<Orders>
  <Order>
    <OrderId>4001</OrderId>
	<CustomerId>CENTC</CustomerId>
	<ShipName>Queen Cozinhaa</ShipName>
	<ShipCountry>USA</ShipCountry>
  </Order>
  <Order>
    <OrderId>4002</OrderId>
	<CustomerId>ERNSH</CustomerId>
	<ShipName>Queen Cozinhaa</ShipName>
	<ShipCountry>USA</ShipCountry>
  </Order>
</Orders>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No Duplicate XML files are generated")]
        [NUnit.Framework.CategoryAttribute("OrderFeed")]
        public virtual void NoDuplicateXMLFilesAreGenerated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No Duplicate XML files are generated", new string[] {
                        "OrderFeed"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderId",
                        "CustomerId",
                        "EmployeeId",
                        "OrderFeed"});
            table6.AddRow(new string[] {
                        "5001",
                        "CENTC",
                        "4",
                        "1"});
            table6.AddRow(new string[] {
                        "5002",
                        "ERNSH",
                        "1",
                        "1"});
#line 56
 testRunner.Given("the following order has been shipped", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServiceName"});
            table7.AddRow(new string[] {
                        "OrderFeedService"});
#line 60
 testRunner.When("the OrderFeed Service is run", ((string)(null)), table7, "When ");
#line 63
 testRunner.Then("0 file should be generated with name OrderFeed<datetimestamp>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generation of OrderFeedMessages in MSM queue")]
        [NUnit.Framework.CategoryAttribute("OrderFeed")]
        [NUnit.Framework.CategoryAttribute("PurgeMessage")]
        public virtual void GenerationOfOrderFeedMessagesInMSMQueue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generation of OrderFeedMessages in MSM queue", new string[] {
                        "OrderFeed",
                        "PurgeMessage"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 68
 testRunner.Given("there are no messages in orderfeedqueue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderId",
                        "CustomerId",
                        "EmployeeId",
                        "OrderFeed"});
            table8.AddRow(new string[] {
                        "9001",
                        "CENTC",
                        "4",
                        "0"});
#line 69
 testRunner.Given("the following order has been shipped", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServiceName"});
            table9.AddRow(new string[] {
                        "OrderFeedService"});
#line 72
 testRunner.When("the OrderFeed Service is run", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "QueueName",
                        "MessageBody"});
            table10.AddRow(new string[] {
                        "orderfeedqueue",
                        "Event raised for Customer CENTC with OrderId as 9001"});
#line 75
 testRunner.Then("the below message should be raised in MSM queue", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non generation of OrderFeedMessages")]
        [NUnit.Framework.CategoryAttribute("OrderFeed")]
        public virtual void NonGenerationOfOrderFeedMessages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non generation of OrderFeedMessages", new string[] {
                        "OrderFeed"});
#line 80
this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 81
 testRunner.Given("there are no messages in orderfeedqueue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderId",
                        "CustomerId",
                        "EmployeeId",
                        "OrderFeed"});
            table11.AddRow(new string[] {
                        "7001",
                        "CENTC",
                        "4",
                        "1"});
#line 82
 testRunner.Given("the following order has been shipped", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServiceName"});
            table12.AddRow(new string[] {
                        "OrderFeedService"});
#line 85
 testRunner.When("the OrderFeed Service is run", ((string)(null)), table12, "When ");
#line 88
 testRunner.Then("no message should be raised in orderfeedqueue queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
